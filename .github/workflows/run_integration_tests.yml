name: run integration tests
on:
  workflow_run:
    workflows:
      - "build test image"
    types:
        - completed
jobs:
  api_tests:
    name: API Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        token: [ "", "XXXX" ]
        cert_path: [ "", "/misc/certificate.crt" ]
        license_path: [ "", "/misc/license.lic" ]
        backend: [ "fs", "s3" ]
        include:
          - cert_path: "/misc/certificate.crt"
            url: https://127.0.0.1:8383
          - cert_path: ""
            url: http://127.0.0.1:8383
    timeout-minutes: 5
    env:
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
      MINIO_BUCKET: test
    steps:
      - uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: image
          path: /tmp/

      - name: Load image
        run: |
          docker load --input /tmp/image.tar
          docker image ls -a

      - name: Create license
        run: echo '${{secrets.LICENSE_KEY}}' > ./misc/license.lic

      - name: Run ReductStore with FileSystem backend
        if: ${{matrix.backend == 'fs'}}
        run: |
          docker run --network=host -v ${PWD}/misc:/misc --env RS_API_TOKEN=${{matrix.token}}  \
            --name reduct                                     \
            --env RS_CERT_PATH=${{matrix.cert_path}}          \
            --env RS_LICENSE_PATH=${{matrix.license_path}}    \
            --env RS_CERT_KEY_PATH=/misc/privateKey.key       \
            --env RS_CORS_ALLOW_ORIGIN="https://first-allowed-origin.com, https://second-allowed-origin.com"  \
            -d ${{github.repository}}
          sleep 2
          docker logs reduct

      - name: Run MinIO server and create bucket
        if: ${{matrix.backend == 's3'}}
        uses: ./.github/actions/run-minio
        with:
          access_key: ${{ env.MINIO_ACCESS_KEY }}
          secret_key: ${{ env.MINIO_SECRET_KEY }}
          bucket_name: ${{ env.MINIO_BUCKET }}

      - name: Run ReductStore with S3 backend
        if: ${{matrix.backend == 's3'}}
        run: |
          docker run --network=host -v ${PWD}/misc:/misc \
          --env RS_API_TOKEN=${{matrix.token}} \
          --env RS_CERT_PATH=${{matrix.cert_path}} \
          --env RS_LICENSE_PATH=${{matrix.license_path}} \
          --env RS_CERT_KEY_PATH=/misc/privateKey.key \
          --env RS_STORAGE_TYPE=s3 \
          --env RS_REMOTE_BACKEND_ENDPOINT=${{ env.MINIO_ENDPOINT }} \
          --env RS_REMOTE_ACCESS_KEY=${{ env.MINIO_ACCESS_KEY }} \
          --env RS_REMOTE_SECRET_KEY=${{ env.MINIO_SECRET_KEY }} \
          --env RS_REMOTE_BUCKET=${{ env.MINIO_BUCKET }} \
          --env RS_CORS_ALLOW_ORIGIN="https://first-allowed-origin.com, https://second-allowed-origin.com" \
          --name reduct -d ${{github.repository}}
          sleep 5

      - name: Build API tests
        run: |
          docker login -u ${{ secrets.DOCKER_USER }} -p ${{ secrets.DOCKER_TOKEN }}
          docker build -t api ./integration_tests/api

      - name: Run API tests
        run: docker run --network=host
          --env API_TOKEN=${{matrix.token}}
          --env LICENSE_PATH=${{matrix.license_path}}
          --env STORAGE_URL=${{matrix.url}} api

      - name: Print docker logs
        if: always()
        run: docker logs reduct

  migration_test:
    name: Migration Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        version:
          [
            "latest",
            "v1.15.6",
            "v1.14.8",
            "v1.13.5",
            "v1.12.4",
            "v1.11.2",
            "v1.10.1",
            "v1.9.5",
            "v1.8.2",
            "v1.7.3",
          ]
    env:
      RS_API_TOKEN: XXXX
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.12

      - name: Run latest stable ReductStore
        run: |
          docker login -u ${{ secrets.DOCKER_USER }} -p ${{ secrets.DOCKER_TOKEN }}
          docker run --network=host -v ./data:/data --env RS_API_TOKEN=${RS_API_TOKEN} --name latest -d reduct/store:${{matrix.version}}
          sleep 5
          docker logs latest

      - name: Upload data
        run: |
          pip install -r ./integration_tests/data_check/requirements.txt
          python3 ./integration_tests/data_check/uploader.py

      - name: Stop latest stable ReductStore
        run: docker stop latest

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: image
          path: /tmp/

      - name: Load image
        run: |
          docker load --input /tmp/image.tar
          docker image ls -a

      - name: Run current ReductStore
        run: |
          docker run --network=host -v ./data:/data --env RS_API_TOKEN=${RS_API_TOKEN} --name current -d ${{github.repository}}
          sleep 5
          docker logs current

      - name: Check data after migration
        run: python3 ./integration_tests/data_check/checker.py

      - name: Restart current ReductStore
        run: |
          docker restart current
          sleep 5
          docker logs current

      - name: Check data after restart
        run: python3 ./integration_tests/data_check/checker.py

      - name: Save docker logs
        if: always()
        run: docker logs current | zip > /tmp/docker-log.zip
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: docker-log-migration-${{matrix.version}}
          path: /tmp/docker-log.zip

      - name: Show replication report
        if: always()
        run: cat ./report.json

  recovery_test:
    name: Recovery Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        backend: [ "fs", "s3" ]
        cmd: [ "stop", "kill" ]
    env:
      RS_API_TOKEN: XXXX
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
      MINIO_BUCKET: test
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.12

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: image
          path: /tmp/

      - name: Load image
        run: |
          docker load --input /tmp/image.tar
          docker image ls -a

      - name: Run ReductStore with FileSystem backend
        if: ${{matrix.backend == 'fs'}}
        run: |
          docker run --network=host -v ./data:/data --env RS_API_TOKEN=${RS_API_TOKEN} --name reductstore -d ${{github.repository}}
          sleep 5
          docker logs reductstore

      - name: Run MiniO server and create bucket
        if: ${{matrix.backend == 's3'}}
        uses: ./.github/actions/run-minio
        with:
          access_key: ${{ env.MINIO_ACCESS_KEY }}
          secret_key: ${{ env.MINIO_SECRET_KEY }}
          bucket_name: ${{ env.MINIO_BUCKET }}

      - name: Run ReductStore with S3 backend
        if: ${{matrix.backend == 's3'}}
        run: |
          docker run --network=host -v ./data:/data \
            --env RS_API_TOKEN=${RS_API_TOKEN} \
            --env RS_STORAGE_TYPE=s3 \
            --env RS_REMOTE_BACKEND_ENDPOINT=http://127.0.0.1:9000 \
            --env RS_REMOTE_ACCESS_KEY=${MINIO_ACCESS_KEY} \
            --env RS_REMOTE_SECRET_KEY=${MINIO_SECRET_KEY} \
            --env RS_REMOTE_BUCKET=${MINIO_BUCKET} \
            --name reductstore -d ${{github.repository}}

      - name: Upload data
        run: |
          pip install -r ./integration_tests/data_check/requirements.txt
          python3 ./integration_tests/data_check/uploader.py

      - name: Restart ReductStore
        run: |
          docker ${{matrix.cmd}} reductstore
          docker run --network=host -v ./data:/data --env RS_API_TOKEN=${RS_API_TOKEN} --name reductstore-1 -d ${{github.repository}}
          sleep 5
          docker logs reductstore-1

      - name: Check data after migration
        run: python3 ./integration_tests/data_check/checker.py

      - name: Save docker logs
        if: always()
        run: docker logs reductstore | zip > /tmp/docker-log.zip
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: docker-log-recovery-${{matrix.cmd}}-${{matrix.backend}}
          path: /tmp/docker-log.zip

      - name: Show replication report
        if: always()
        run: cat ./report.json

  replication_test:
    name: Replication Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          # 10Kb blobs max records in a batch
          - max_blob_size: 0.01
            entries: 4
            records: 1536
          # 1MB blobs
          - max_blob_size: 1
            entries: 4
            records: 1536
          # Few big blobs (bigger than batch size)
          - max_blob_size: 18
            entries: 2
            records: 128
    env:
      RS_API_TOKEN: XXXX
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.12

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: image
          path: /tmp/

      - name: Load image
        run: |
          docker load --input /tmp/image.tar
          docker image ls -a

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: image
          path: /tmp/

      - name: Run current ReductStore
        run: |
          docker run --network=host -v ./data:/data \
            --env RS_LOG_LEVEL=DEBUG \
            --env RS_API_TOKEN=${RS_API_TOKEN} \
            --env RS_BUCKET_1_NAME=src \
            --env RS_BUCKET_2_NAME=dest \
            --env RS_REPLICATION_1_NAME=replication \
            --env RS_REPLICATION_1_SRC_BUCKET=src \
            --env RS_REPLICATION_1_DST_BUCKET=dest \
            --env RS_REPLICATION_1_DST_HOST=http://127.0.0.1:8383 \
            --env RS_REPLICATION_1_DST_TOKEN=${RS_API_TOKEN} \
            --name current -d ${{github.repository}}
          sleep 5
          docker logs current

      - name: Upload data
        env:
          BUCKET_NAME: src
          NUMBER_OF_ENTRIES: ${{matrix.entries}}
          NUMBER_OF_RECORDS: ${{matrix.records}}
          MAX_BLOB_SIZE: ${{matrix.max_blob_size}}
        run: |
          pip install -r ./integration_tests/data_check/requirements.txt
          python3 ./integration_tests/data_check/uploader.py
          sleep 30 # Wait for replication

      - name: Check replicated data
        env:
          BUCKET_NAME: dest
        run: python3 ./integration_tests/data_check/checker.py

      - name: Save docker logs
        if: always()
        run: docker logs current | zip > /tmp/docker-log.zip
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: docker-log-repl-${{matrix.max_blob_size}}
          path: /tmp/docker-log.zip

      - name: Show replication report
        if: always()
        run: cat ./report.json

      - name: Show replication status
        if: always()
        run: |
          curl -H "Authorization: Bearer ${RS_API_TOKEN}" http://127.0.0.1:8383/api/v1/replications/replication | jq
