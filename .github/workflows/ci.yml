name: ci
on:
  push:
    branches: [ main, stable ]
    tags:
      - 'v*'
    paths-ignore:
      - docs/**
      - README.md
      - CHANGELOG.md

  pull_request:
    branches: [ main, stable ]
    paths-ignore:
      - docs/**
      - README.md
      - CHANGELOG.md
jobs:
  rust-fmt:
    runs-on: ubuntu-latest
    name: Rust Linter
    steps:
      - uses: actions/checkout@v3
      - name: Check code
        run: cargo fmt --all -- --check

  build:
    name: Build Linux Docker image
    runs-on: ubuntu-latest
    needs:
      - rust-fmt
    steps:
      - uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Build and export
        uses: docker/build-push-action@v2
        with:
          context: .
          tags: ${{github.repository}}:latest
          outputs: type=docker,dest=/tmp/image.tar

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: image
          path: /tmp/image.tar

  unit_tests:
    name: Unit Tests
    needs:
      - rust-fmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install latest Rust and dependencies
        run: |
          sudo apt-get update && sudo apt-get install -y build-essential curl protobuf-compiler
          curl https://sh.rustup.rs -sSf | sh -s -- -y

      - name: Run Tests
        run: cargo test

  api_tests:
    name: API Tests
    runs-on: ubuntu-latest
    needs:
      - unit_tests
      - build
    strategy:
      matrix:
        token: [ "", "XXXX" ]
        cert_path: [ "", "/misc/certificate.crt" ]
        include:
          - cert_path: "/misc/certificate.crt"
            url: https://127.0.0.1:8383
          - cert_path: ""
            url: http://127.0.0.1:8383
    steps:
      - uses: actions/checkout@v3
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: image
          path: /tmp/
      - name: Load image
        run: |
          docker load --input /tmp/image.tar
          docker image ls -a
      - name: Run Storage
        run: docker run --network=host -v ${PWD}/misc:/misc --env RS_API_TOKEN=${{matrix.token}} --env RS_CERT_PATH=${{matrix.cert_path}} --env RS_CERT_KEY_PATH=/misc/privateKey.key -d ${{github.repository}}
      - name: Build API tests
        run: docker build -t api_tests ./api_tests
      - name: Run API tests
        run: docker run --network=host --env API_TOKEN=${{matrix.token}} --env STORAGE_URL=${{matrix.url}} api_tests

  build_snap:
    runs-on: ubuntu-latest
    name: Build snap package
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
    needs:
      - rust-fmt
    steps:
      - uses: actions/checkout@v3
      - uses: snapcore/action-build@v1
        id: build-snap
        with:
          snapcraft-args: '--enable-experimental-extensions'

      # Make sure the snap is installable
      - run: |
          sudo snap install --dangerous ${{ steps.build-snap.outputs.snap }}
      # Do some testing with the snap
      - run: |
          snap services reductstore
      - uses: actions/upload-artifact@v3
        with:
          name: reductstore
          path: "*.snap"

  publish_snap:
    name: Publish snap package
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [amd64, arm64]
    needs:
      - build_snap
      - api_tests
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: reductstore
          path: .
      - name: Save snap name in environment variable
        run: |
          echo "SNAP_NAME=$(ls *.snap | cut  -f1 | grep ${{matrix.arch}})" >> $GITHUB_ENV
      - uses: snapcore/action-publish@v1
        env:
          SNAPCRAFT_STORE_CREDENTIALS: ${{ secrets.SNAPCRAFT_STORE_LOGIN }}
        with:
          snap: ${{env.SNAP_NAME}}
          release: ${{ startsWith(github.ref, 'refs/tags/') && 'stable' || 'edge'}}

  push_image_dockerhub:
    runs-on: ubuntu-latest
    name: Push to DockerHub Registry
    needs:
      - api_tests
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Take build commit
        run: |
          echo "GITHUB_SHA=$(git rev-parse --short "$GITHUB_SHA")" >> $GITHUB_ENV

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: reduct/store

      - name: Build and push Docker image to GitHub repo
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64
          build-args: GIT_COMMIT=${{env.GITHUB_SHA}}


  make_release:
    runs-on: ubuntu-latest
    needs:
      - api_tests
    name: Make release
    if: ${{ startsWith(github.event.ref, 'refs/tags/v') }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/create-release@v1
        id: create_release
        with:
          draft: true
          prerelease: false
          release_name: Release ${{ steps.version.outputs.version }}
          tag_name: ${{ github.ref }}
          body: Copy changes from CHANGELOG.md
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: Download Linux artifact
        uses: actions/download-artifact@v2
        with:
          name: image
          path: /tmp/
      - name: Load Linux image and get binary
        run: |
          docker load --input /tmp/image_Release.tar
          docker image ls -a
          id=$(docker create ${{github.repository}})
          docker cp $id:/usr/local/bin/reductstore reductstore
          tar -czvf reductstore.linux-amd64.tar.gz reductstore
      - name: Upload Linux artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: reductstore.linux-amd64.tar.gz
          asset_name: reductstore.linux-amd64.tar.gz
          asset_content_type: application/gzip
      - name: Download Macos artifact
        uses: actions/download-artifact@v2
        with:
          name: macos_binary
          path: /tmp/
      - name: Archive MacOs binary
        run: |
          cd /tmp
          tar -czvf reductstore.macos-amd64.tar.gz  reductstore
      - name: Upload MacOs artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: /tmp/reductstore.macos-amd64.tar.gz
          asset_name: reductstore.macos-amd64.tar.gz
          asset_content_type: application/gzip

      - name: Download Windows artifact
        uses: actions/download-artifact@v2
        with:
          name: windows_binary
          path: /tmp/
      - name: Archive Windows binary
        run: |
          cd /tmp
          zip -o reductstore.win-amd64.zip  reductstore.exe
      - name: Upload Windows artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: /tmp/reductstore.win-amd64.zip
          asset_name: reductstore.win-amd64.zip
          asset_content_type: application/zip
