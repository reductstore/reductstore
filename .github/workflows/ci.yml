name: ci
on:
  push:
    branches: [ main, stable ]
    tags:
      - 'v*'
    paths-ignore:
      - docs/**
      - README.md
      - CHANGELOG.md

  pull_request:
    branches: [ main, stable ]
    paths-ignore:
      - docs/**
      - README.md
      - CHANGELOG.md

env:
  REGISTRY_IMAGE: reduct/store

jobs:
  rust_fmt:
    runs-on: ubuntu-latest
    name: Rust Linter
    steps:
      - uses: actions/checkout@v3
      - name: Check code
        run: cargo fmt --all -- --check

  build:
    name: Build Linux Docker image
    runs-on: ubuntu-latest
    needs:
      - rust_fmt
    steps:
      - uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Build and export
        uses: docker/build-push-action@v2
        with:
          context: .
          tags: ${{github.repository}}:latest
          outputs: type=docker,dest=/tmp/image.tar

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: image
          path: /tmp/image.tar

  unit_tests:
    name: Build and Run Unit Tests
    needs:
      - rust_fmt
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - uses: arduino/setup-protoc@v1
        with:
          version: '3.x'
          repo-token: ${{ secrets.ACTION_GITHUB_TOKEN }}

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Run Tests
        run: cargo test --release -p reductstore

      - name: Build binary
        run: cargo build --release -p reductstore

      - name: Upload binary
        uses: actions/upload-artifact@v3
        with:
          name: reductstore-${{ matrix.os }}
          path: target/release/reductstore${{ matrix.os == 'windows-latest' && '.exe' || '' }}

  sdk_tests:
    name: Client SDK Tests
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - uses: actions/checkout@v3
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: image
          path: /tmp/
      - name: Load image
        run: |
          docker load --input /tmp/image.tar
          docker image ls -a
      - name: Run Database
        run: docker run --network=host -v ${PWD}/misc:/misc --env RS_API_TOKEN=TOKEN -d ${{github.repository}}
      - name: Run Client SDK tests
        run: RS_API_TOKEN=TOKEN cargo test --package reduct-rs --lib client::tests -- --test-threads=1

  api_tests:
    name: API Tests
    runs-on: ubuntu-latest
    needs:
      - unit_tests
      - build
    strategy:
      matrix:
        token: [ "", "XXXX" ]
        cert_path: [ "", "/misc/certificate.crt" ]
        include:
          - cert_path: "/misc/certificate.crt"
            url: https://127.0.0.1:8383
          - cert_path: ""
            url: http://127.0.0.1:8383
    steps:
      - uses: actions/checkout@v3
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: image
          path: /tmp/
      - name: Load image
        run: |
          docker load --input /tmp/image.tar
          docker image ls -a
      - name: Run Database
        run: docker run --network=host -v ${PWD}/misc:/misc --env RS_API_TOKEN=${{matrix.token}} --env RS_CERT_PATH=${{matrix.cert_path}} --env RS_CERT_KEY_PATH=/misc/privateKey.key -d ${{github.repository}}
      - name: Build API tests
        run: docker build -t api_tests ./api_tests
      - name: Run API tests
        run: docker run --network=host --env API_TOKEN=${{matrix.token}} --env STORAGE_URL=${{matrix.url}} api_tests

  build_snap:
    runs-on: ubuntu-latest
    name: Build snap package
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
    needs:
      - rust_fmt
    steps:
      - uses: actions/checkout@v3
      - uses: snapcore/action-build@v1
        id: build-snap
        with:
          snapcraft-args: '--enable-experimental-extensions'

      # Make sure the snap is installable
      - run: |
          sudo snap install --dangerous ${{ steps.build-snap.outputs.snap }}
      # Do some testing with the snap
      - run: |
          snap services reductstore
      - uses: actions/upload-artifact@v3
        with:
          name: reductstore
          path: "*.snap"

  check_tag:
    runs-on: ubuntu-latest
    name: Check tag
    steps:
      - uses: actions/checkout@v3
      - name: Check tag
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          cargo install cargo-get
          if [ "v$(cargo get version)" != "${GITHUB_REF#refs/*/}" ]; then
            echo "Tag does not match version in Cargo.toml"
            exit 1
          fi

  publish_snap:
    name: Publish snap package
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [ amd64, arm64 ]
    needs:
      - build_snap
      - api_tests
      - sdk_tests
      - check_tag
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: reductstore
          path: .
      - name: Save snap name in environment variable
        run: |
          echo "SNAP_NAME=$(ls *.snap | cut  -f1 | grep ${{matrix.arch}})" >> $GITHUB_ENV
      - uses: snapcore/action-publish@v1
        env:
          SNAPCRAFT_STORE_CREDENTIALS: ${{ secrets.SNAPCRAFT_STORE_LOGIN }}
        with:
          snap: ${{env.SNAP_NAME}}
          release: ${{ startsWith(github.ref, 'refs/tags/') && 'stable' || 'edge'}}

  push_image_dockerhub:
    runs-on: ubuntu-latest
    name: Push to DockerHub Registry
    needs:
      - api_tests
      - sdk_tests
      - check_tag
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
    strategy:
      matrix:
        platform: [ linux/amd64, linux/arm64 ]
        include:
          - platform: linux/amd64
            cargo_target: x86_64-unknown-linux-gnu
            gcc_compiler: gcc-11
          - platform: linux/arm64
            cargo_target: aarch64-unknown-linux-gnu
            gcc_compiler: gcc-aarch64-linux-gnu

    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Take build commit
        run: |
          echo "GITHUB_SHA=$(git rev-parse --short "$GITHUB_SHA")" >> $GITHUB_ENV

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY_IMAGE }}

      - name: Build and push Docker image to GitHub repo
        uses: docker/build-push-action@v4
        id: build
        with:
          context: .
          file: buildx.Dockerfile
          labels: ${{ steps.meta.outputs.labels }}
          platforms: ${{ matrix.platform }}
          build-args: |
            GIT_COMMIT=${{env.GITHUB_SHA}}
            CARGO_TARGET=${{matrix.cargo_target}}
            GCC_COMPILER=${{matrix.gcc_compiler}}
          outputs: type=image,name=${{ env.REGISTRY_IMAGE }},push-by-digest=true,name-canonical=true,push=true

      - name: Export digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"
      - name: Upload digest
        uses: actions/upload-artifact@v3
        with:
          name: digests
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  merge_digests:
    runs-on: ubuntu-latest
    needs:
      - push_image_dockerhub
    steps:
      - name: Download digests
        uses: actions/download-artifact@v3
        with:
          name: digests
          path: /tmp/digests
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY_IMAGE }}
      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.REGISTRY_IMAGE }}@sha256:%s ' *)
      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:${{ steps.meta.outputs.version }}

  publish_crate:
    runs-on: ubuntu-latest
    name: Publish crate
    needs:
      - api_tests
      - sdk_tests
      - check_tag # Only publish on tags
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v2
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: Publish crate
        run: |
          cargo login ${{ secrets.CRATES_IO_TOKEN }}
          cargo publish --no-verify

  make_release:
    runs-on: ubuntu-latest
    needs:
      - api_tests
      - sdk_tests
      - check_tag # Only publish on tags
    name: Make release
    if: ${{ startsWith(github.event.ref, 'refs/tags/v') }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/create-release@v1
        id: create_release
        with:
          draft: true
          prerelease: false
          release_name: Release ${{ steps.version.outputs.version }}
          tag_name: ${{ github.ref }}
          body: Copy changes from CHANGELOG.md
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: Download Linux artifact
        uses: actions/download-artifact@v2
        with:
          name: reductstore-ubuntu-latest
          path: /tmp/
      - name: Load Linux image and get binary
        run: |
          cd /tmp
          tar -czvf reductstore.linux-amd64.tar.gz reductstore
      - name: Upload Linux artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: /tmp/reductstore.linux-amd64.tar.gz
          asset_name: reductstore.linux-amd64.tar.gz
          asset_content_type: application/gzip
      - name: Download Macos artifact
        uses: actions/download-artifact@v2
        with:
          name: reductstore-macos-latest
          path: /tmp/
      - name: Archive MacOs binary
        run: |
          cd /tmp
          tar -czvf reductstore.macos-amd64.tar.gz  reductstore
      - name: Upload MacOs artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: /tmp/reductstore.macos-amd64.tar.gz
          asset_name: reductstore.macos-amd64.tar.gz
          asset_content_type: application/gzip

      - name: Download Windows artifact
        uses: actions/download-artifact@v2
        with:
          name: reductstore-windows-latest
          path: /tmp/
      - name: Archive Windows binary
        run: |
          cd /tmp
          zip -o reductstore.win-amd64.zip  reductstore.exe
      - name: Upload Windows artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: /tmp/reductstore.win-amd64.zip
          asset_name: reductstore.win-amd64.zip
          asset_content_type: application/zip
