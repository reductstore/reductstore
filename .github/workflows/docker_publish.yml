name: publish Docker image
on:
  pull_request:
    branches: [ main, stable ]
    paths-ignore:
      - docs/**
      - README.md
      - CHANGELOG.md
permissions:
  id-token: write
  contents: read
#  workflow_run:
#    workflows:
#      - ci
#    types:
#      - completed

env:
  REGISTRY_IMAGE: reduct/store

jobs:
  push_image_dockerhub:
    runs-on: ubuntu-latest
    name: Push to DockerHub Registry
    #if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
    strategy:
      matrix:
        platform: [ linux/amd64, linux/arm64 ]
        include:
          - platform: linux/amd64
            cargo_target: x86_64-unknown-linux-gnu
            gcc_compiler: gcc-11
            digest: linux-amd64
          - platform: linux/arm64
            cargo_target: aarch64-unknown-linux-gnu
            gcc_compiler: gcc-aarch64-linux-gnu
            digest: linux-arm64
          - platform: linux/arm/v7
            cargo_target: armv7-unknown-linux-gnueabihf
            gcc_compiler: gcc-arm-linux-gnueabihf
            digest: linux-armv7

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Take build commit
        run: |
          echo "GITHUB_SHA=$(git rev-parse --short "$GITHUB_SHA")" >> $GITHUB_ENV

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY_IMAGE }}

      - name: Build and push Docker image to GitHub repo
        uses: docker/build-push-action@v4
        id: build
        with:
          context: .
          file: buildx.Dockerfile
          labels: ${{ steps.meta.outputs.labels }}
          platforms: ${{ matrix.platform }}
          build-args: |
            GIT_COMMIT=${{env.GITHUB_SHA}}
            CARGO_TARGET=${{matrix.cargo_target}}
            GCC_COMPILER=${{matrix.gcc_compiler}}
            ARTIFACT_SAS_URL=${{ secrets.ARTIFACT_SAS_URL }}
            RUST_VERSION=${{ vars.MINIMAL_RUST_VERSION }}

          outputs: type=image,name=${{ env.REGISTRY_IMAGE }},push-by-digest=true,name-canonical=true,push=true

      - name: Export digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"
      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ matrix.digest }}
          path: /tmp/digests/
          if-no-files-found: error
          retention-days: 1

  merge_digests:
    name: Merge digests and create manifest list
    runs-on: ubuntu-latest
    needs:
      - push_image_dockerhub
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          pattern: digests-*
          path: /tmp/digests

      - name: Merge digests
        run: |
          mkdir -p /tmp/merged_digests
          find /tmp/digests -type f -print0 | xargs -0 mv -t /tmp/merged_digests
          ls /tmp/merged_digests

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY_IMAGE }}
      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Create manifest list and push
        working-directory: /tmp/merged_digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.REGISTRY_IMAGE }}@sha256:%s ' *)
      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:${{ steps.meta.outputs.version }}

  push_image_ecr_public:
    name: Push to ECR Public
    runs-on: ubuntu-latest
    needs:
      - push_image_dockerhub
    steps:
      - name: Show OIDC subject
        uses: actions/github-script@v7
        with:
          script: |
            const token = await core.getIDToken('sts.amazonaws.com');
            const claims = JSON.parse(Buffer.from(token.split('.')[1], 'base64').toString());
            console.log('aud:', claims.aud);
            console.log('sub:', claims.sub);
            console.log('ref:', process.env.GITHUB_REF);
            console.log('event name:', process.env.GITHUB_EVENT_NAME);

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: "us-east-1"

      - name: Login to ECR Public
        run: |
          aws ecr-public get-login-password --region "us-east-1" \
            | docker login --username AWS --password-stdin public.ecr.aws
      - name: Tag and push to ECR Public
        run: |
          docker tag ${{ env.REGISTRY_IMAGE }}:${{ steps.meta.outputs.version }} public.ecr.aws/${{ secrets.ECR_PUBLIC_REPOSITORY }}:${{ steps.meta.outputs.version }}
          docker push public.ecr.aws/${{ secrets.ECR_PUBLIC_REPOSITORY }}:${{ steps.meta.outputs.version }}
